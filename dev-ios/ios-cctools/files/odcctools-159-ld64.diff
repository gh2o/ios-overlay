diff --git a/ld64/Makefile.in b/ld64/Makefile.in
index 6fea35a..765c296 100644
--- a/ld64/Makefile.in
+++ b/ld64/Makefile.in
@@ -48,6 +48,7 @@ MYDEFS          = -DDEBUG -DBINDIR="\"$(bindir)\"" -DLDPROG="\"$(LDPROG)\"" \
 
 MYLDFLAGS	= -L$(top_builddir)/libstuff
 MYLIBS		= -lstuff $(SSL_LIBS) $(UUID_LIBS) $(LTO_LIBS)
+MYLIBS		+= -ldl -lcrypto
 
 MYCOMPILEFLAGS	= $(WARNINGS) $(MYWARNINGS) $(DEFS) $(MYDEFS) \
 	$(CPPFLAGS) $(MYINCLUDES) $(CFLAGS) $(MDYNAMICNOPIC) 
diff --git a/ld64/src/MachOReaderRelocatable.hpp b/ld64/src/MachOReaderRelocatable.hpp
index 73c58e2..2c70b1f 100755
--- a/ld64/src/MachOReaderRelocatable.hpp
+++ b/ld64/src/MachOReaderRelocatable.hpp
@@ -59,7 +59,25 @@ extern void warning(const char* format, ...);
 namespace mach_o {
 namespace relocatable {
 
+class BaseAtom : public ObjectFile::Atom
+{
+public:
+												BaseAtom() : fStabsStartIndex(0), fStabsCount(0) {}
 
+	virtual void								setSize(uint64_t size)	= 0;
+	virtual void								addReference(ObjectFile::Reference* ref) = 0;
+	virtual void								sortReferences() = 0;
+	virtual void								addLineInfo(const ObjectFile::LineInfo& info) = 0;
+	virtual uint64_t							getObjectAddress() const = 0;
+	virtual uint32_t							getOrdinal() const { return fOrdinal; }
+	virtual void								setOrdinal(uint32_t value) { fOrdinal = value; }
+	virtual const void*							getSectionRecord() const = 0;
+	virtual bool								isAlias() const { return false; }
+
+	uint32_t									fStabsStartIndex;
+	uint32_t									fStabsCount;
+	uint32_t									fOrdinal;
+};
 
 class ReferenceSorter
 {
@@ -267,26 +285,6 @@ public:
 
 LinkEditSegment LinkEditSegment::fgSingleton;
 
-class BaseAtom : public ObjectFile::Atom
-{
-public:
-												BaseAtom() : fStabsStartIndex(0), fStabsCount(0) {}
-
-	virtual void								setSize(uint64_t size)	= 0;
-	virtual void								addReference(ObjectFile::Reference* ref) = 0;
-	virtual void								sortReferences() = 0;
-	virtual void								addLineInfo(const ObjectFile::LineInfo& info) = 0;
-	virtual uint64_t							getObjectAddress() const = 0;
-	virtual uint32_t							getOrdinal() const { return fOrdinal; }
-	virtual void								setOrdinal(uint32_t value) { fOrdinal = value; }
-	virtual const void*							getSectionRecord() const = 0;
-	virtual bool								isAlias() const { return false; }
-
-	uint32_t									fStabsStartIndex;
-	uint32_t									fStabsCount;
-	uint32_t									fOrdinal;
-};
-
 class BaseAtomSorter
 {
 public:
diff --git a/ld64/src/ld.cpp b/ld64/src/ld.cpp
index 1863e0b..38947a1 100755
--- a/ld64/src/ld.cpp
+++ b/ld64/src/ld.cpp
@@ -2913,42 +2913,42 @@ ObjectFile::Reader* Linker::createReader(const Options::FileInfo& info)
 	switch (fArchitecture) {
 		case CPU_TYPE_POWERPC:
 			if ( mach_o::relocatable::Reader<ppc>::validFile(p) )
-				return this->addObject(new mach_o::relocatable::Reader<ppc>::Reader(p, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addObject(new typename mach_o::relocatable::Reader<ppc>::Reader(p, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			else if ( mach_o::dylib::Reader<ppc>::validFile(p, info.options.fBundleLoader) )
-				return this->addDylib(new mach_o::dylib::Reader<ppc>::Reader(p, len, info.path, info.options, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addDylib(new typename mach_o::dylib::Reader<ppc>::Reader(p, len, info.path, info.options, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			else if ( archive::Reader<ppc>::validFile(p, len) )
-				return this->addArchive(new archive::Reader<ppc>::Reader(p, len, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addArchive(new typename archive::Reader<ppc>::Reader(p, len, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			break;
 		case CPU_TYPE_POWERPC64:
 			if ( mach_o::relocatable::Reader<ppc64>::validFile(p) )
-				return this->addObject(new mach_o::relocatable::Reader<ppc64>::Reader(p, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addObject(new typename mach_o::relocatable::Reader<ppc64>::Reader(p, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			else if ( mach_o::dylib::Reader<ppc64>::validFile(p, info.options.fBundleLoader) )
-				return this->addDylib(new mach_o::dylib::Reader<ppc64>::Reader(p, len, info.path, info.options, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addDylib(new typename mach_o::dylib::Reader<ppc64>::Reader(p, len, info.path, info.options, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			else if ( archive::Reader<ppc64>::validFile(p, len) )
-				return this->addArchive(new archive::Reader<ppc64>::Reader(p, len, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addArchive(new typename archive::Reader<ppc64>::Reader(p, len, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			break;
 		case CPU_TYPE_I386:
 			if ( mach_o::relocatable::Reader<x86>::validFile(p) )
-				return this->addObject(new mach_o::relocatable::Reader<x86>::Reader(p, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addObject(new typename mach_o::relocatable::Reader<x86>::Reader(p, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			else if ( mach_o::dylib::Reader<x86>::validFile(p, info.options.fBundleLoader) )
-				return this->addDylib(new mach_o::dylib::Reader<x86>::Reader(p, len, info.path, info.options, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addDylib(new typename mach_o::dylib::Reader<x86>::Reader(p, len, info.path, info.options, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			else if ( archive::Reader<x86>::validFile(p, len) )
-				return this->addArchive(new archive::Reader<x86>::Reader(p, len, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addArchive(new typename archive::Reader<x86>::Reader(p, len, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			break;
 		case CPU_TYPE_X86_64:
 			if ( mach_o::relocatable::Reader<x86_64>::validFile(p) )
-				return this->addObject(new mach_o::relocatable::Reader<x86_64>::Reader(p, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addObject(new typename mach_o::relocatable::Reader<x86_64>::Reader(p, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			else if ( mach_o::dylib::Reader<x86_64>::validFile(p, info.options.fBundleLoader) )
-				return this->addDylib(new mach_o::dylib::Reader<x86_64>::Reader(p, len, info.path, info.options, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addDylib(new typename mach_o::dylib::Reader<x86_64>::Reader(p, len, info.path, info.options, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			else if ( archive::Reader<x86_64>::validFile(p, len) )
-				return this->addArchive(new archive::Reader<x86_64>::Reader(p, len, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addArchive(new typename archive::Reader<x86_64>::Reader(p, len, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 		case CPU_TYPE_ARM:
 			if ( mach_o::relocatable::Reader<arm>::validFile(p) )
-				return this->addObject(new mach_o::relocatable::Reader<arm>::Reader(p, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addObject(new typename mach_o::relocatable::Reader<arm>::Reader(p, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			else if ( mach_o::dylib::Reader<arm>::validFile(p, info.options.fBundleLoader) )
-				return this->addDylib(new mach_o::dylib::Reader<arm>::Reader(p, len, info.path, info.options, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addDylib(new typename mach_o::dylib::Reader<arm>::Reader(p, len, info.path, info.options, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			else if ( archive::Reader<arm>::validFile(p, len) )
-				return this->addArchive(new archive::Reader<arm>::Reader(p, len, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
+				return this->addArchive(new typename archive::Reader<arm>::Reader(p, len, info.path, info.modTime, fOptions.readerOptions(), fNextInputOrdinal), info, len);
 			break;
 			break;
 	}
